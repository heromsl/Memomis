# Kernel sysctl configuration file for Linux
# 针对 Ubuntu 20.04 LTS 服务器系统的内核参数优化配置
#
# 基于 Michiel Klaver 的版本 1.14 (2019-04-05) 修改
# 详细参数解释请参考原始文件注释和相关文档
#
# 本文件应保存为 /etc/sysctl.conf 并使用以下命令激活：
# sysctl -e -p /etc/sysctl.conf
#
# 二进制值 0 表示禁用，1 表示启用。 更多细节请参考 sysctl(8) 和 sysctl.conf(5) 手册页。
#
# 针对 Ubuntu 20.04 LTS 服务器系统，内核版本通常为 5.x
# 适用于高负载、高带宽网络环境下的专用服务器，如 Web/FTP/Mail/DNS 服务器
# 优化目标为高性能和高连接速率
# 请勿在拥塞网络或易丢包的 xDSL/Cable 连接中使用
# ----------

###
### 通用系统安全选项 ###
###

# 禁用 SysRq 功能，增强安全性 (生产环境推荐)
kernel.sysrq = 0

# 核心转储文件名附加进程ID，方便调试多线程应用 (推荐启用)
kernel.core_uses_pid = 1

# 允许更大的进程ID范围，支持更多进程
kernel.pid_max = 65535

# 限制 /proc/<pid>/maps 和 /proc/<pid>/smaps 文件的访问权限，增强安全性 (推荐启用)
kernel.maps_protect = 1

# 启用地址空间布局随机化 (ASLR)，增强安全性 (推荐设置为 2，完全随机化)
kernel.randomize_va_space = 2

# 控制消息队列中单个消息的最大大小 (字节)
kernel.msgmnb = 65535

# 控制消息队列的默认最大容量 (字节)
kernel.msgmax = 65535

# 禁止 setuid/setgid 程序生成核心转储文件，降低安全风险 (推荐设置为 0)
fs.suid_dumpable = 0

# 隐藏暴露的内核指针信息，增强安全性 (推荐启用)
kernel.kptr_restrict = 1


###
### 改进系统内存管理 ###
###

# 增加文件句柄最大数量，适用于文件密集型应用
fs.file-max = 209708

# 降低 swap 使用倾向，提高性能 (内存充足时)
vm.swappiness = 30
vm.dirty_ratio = 30
vm.dirty_background_ratio = 5

# 指定进程允许 mmap 的最小虚拟地址，防止 NULL 指针解引用漏洞
vm.mmap_min_addr = 4096

# 允许 50% 内存超额分配，提高内存利用率
vm.overcommit_ratio = 50
vm.overcommit_memory = 0

# 设置共享内存最大分配量为 256MB
kernel.shmmax = 268435456
kernel.shmall = 268435456

# 保持至少 128MB 可用 RAM 空间，提高高负载稳定性 (可根据实际内存调整)
vm.min_free_kbytes = 131072  # 128MB (131072 KB)


###
### 通用网络安全选项 ###
###

# 启用 SYN cookies 防御 SYN 攻击 (推荐启用)
net.ipv4.tcp_syncookies = 1
# 降低 SYN 和 SYN-ACK 重传次数，加快连接建立 (网络环境良好时)
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_synack_retries = 2
# 增加 SYN backlog 队列长度，应对高并发连接请求
net.ipv4.tcp_max_syn_backlog = 8192

# 禁用 IP 数据包转发，增强安全性 (服务器通常不需要转发)
net.ipv4.ip_forward = 0
net.ipv4.conf.all.forwarding = 0
net.ipv4.conf.default.forwarding = 0
net.ipv6.conf.all.forwarding = 0
net.ipv6.conf.default.forwarding = 0

# 禁用 IP 源路由，防止路由欺骗 (推荐禁用)
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

# 启用反向路径过滤，防止 IP 欺骗 (推荐启用)
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

# 禁用 ICMP 重定向接受，防止路由欺骗 (推荐禁用)
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0

# 启用记录可疑数据包日志，方便安全审计 (推荐启用)
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1

# 减少 TCP FIN_WAIT_2 状态超时时间，更快回收资源
net.ipv4.tcp_fin_timeout = 7

# 减少 TCP 保活连接时间，更快检测死连接
net.ipv4.tcp_keepalive_time = 300
net.ipv4.tcp_keepalive_probes = 5
net.ipv4.tcp_keepalive_intvl = 15

# 禁止 BOOTP 中继 (推荐禁用)
net.ipv4.conf.all.bootp_relay = 0

# 禁止代理 ARP (推荐禁用)
net.ipv4.conf.all.proxy_arp = 0

# 启用 TCP 时间戳，提高 TCP 性能 (推荐启用)
net.ipv4.tcp_timestamps = 1

# 不忽略定向 Ping 请求，方便网络诊断 (推荐设置为 0)
net.ipv4.icmp_echo_ignore_all = 0

# 忽略广播 Ping 请求，减少广播风暴和 DDoS 风险 (推荐启用)
net.ipv4.icmp_echo_ignore_broadcasts = 1

# 忽略格式错误的 ICMP 错误响应消息，增强安全性 (推荐启用)
net.ipv4.icmp_ignore_bogus_error_responses = 1

# 允许的本地端口范围
net.ipv4.ip_local_port_range = 16384 65535

# 启用 RFC1337 修复，提高 TCP 稳定性 (推荐启用)
net.ipv4.tcp_rfc1337 = 1

# 禁用 IPv6 自动配置 (如果不需要 IPv6，推荐禁用)
net.ipv6.conf.all.autoconf=0
net.ipv6.conf.all.accept_ra=0
net.ipv6.conf.default.autoconf=0
net.ipv6.conf.default.accept_ra=0
net.ipv6.conf.eth0.autoconf=0
net.ipv6.conf.eth0.accept_ra=0


###
### 调优网络性能 ###
###

# 使用 BBR TCP 拥塞控制算法，优化高带宽、高延迟网络性能 (推荐启用，Ubuntu 20.04 内核支持)
net.ipv4.tcp_congestion_control = bbr
# 设置 tcp_notsent_lowat 为 16384，优化 HTTP/2 优先级
net.ipv4.tcp_notsent_lowat = 16384

# 启用 fq 队列管理调度器，提高网络公平性和降低延迟 (TCP 负载重服务器推荐启用)
net.core.default_qdisc = fq

# 启用 TCP 窗口缩放，提高高带宽网络吞吐量 (推荐启用)
net.ipv4.tcp_window_scaling = 1

# 增加 TCP 和 UDP 接收缓冲区大小，提高网络吞吐量
net.ipv4.tcp_rmem = 8192 87380 16777216
net.ipv4.udp_rmem_min = 16384
net.core.rmem_default = 262144
net.core.rmem_max = 16777216

# 增加 TCP 和 UDP 发送缓冲区大小，提高网络吞吐量
net.ipv4.tcp_wmem = 8192 65536 16777216
net.ipv4.udp_wmem_min = 16384
net.core.wmem_default = 262144
net.core.wmem_max = 16777216

# 增加 TCP 连接 backlog 队列大小，应对高并发连接请求
net.core.somaxconn = 32768

# 增加网络设备接收队列最大长度和设备权重，提高包处理能力
net.core.netdev_max_backlog = 16384
net.core.dev_weight = 64

# 增加最大选项内存缓冲区大小
net.core.optmem_max = 65535

# 增加 TCP TIME-WAIT 状态连接 bucket 池大小，应对高并发短连接
net.ipv4.tcp_max_tw_buckets = 1440000

# 允许重用 TIME-WAIT 连接，但不回收 (回收可能破坏 NAT 后面的客户端)
net.ipv4.tcp_tw_recycle = 0
net.ipv4.tcp_tw_reuse = 1

# 限制孤立 TCP 连接数量，防止资源耗尽
net.ipv4.tcp_max_orphans = 16384
net.ipv4.tcp_orphan_retries = 0

# 限制 IP 分片重组最大内存，缓解 CVE-2018-5391 漏洞
net.ipv4.ipfrag_low_thresh = 196608
net.ipv6.ip6frag_low_thresh = 196608
net.ipv4.ipfrag_high_thresh = 262144
net.ipv6.ip6frag_high_thresh = 262144

# 禁用 ssthresh 缓存，使新连接公平竞争带宽
net.ipv4.tcp_no_metrics_save = 1
# 启用 TCP 接收缓冲区自动调整，优化性能
net.ipv4.tcp_moderate_rcvbuf = 1

# 增加 RPC 数据报队列长度，提高 RPC 服务性能
net.unix.max_dgram_qlen = 50

# 限制 ARP 表大小，防止 ARP 表溢出
net.ipv4.neigh.default.gc_thresh3 = 2048
net.ipv4.neigh.default.gc_thresh2 = 1024
net.ipv4.neigh.default.gc_thresh1 = 32
net.ipv4.neigh.default.gc_interval = 30
net.ipv4.neigh.default.proxy_qlen = 96
net.ipv4.neigh.default.unres_qlen = 6

# 启用显式拥塞通知 (ECN)，提高网络效率 (网络环境支持时推荐启用)
net.ipv4.tcp_ecn = 1
# 设置 TCP 乱序数据包容忍度
net.ipv4.tcp_reordering = 3

# 减少重试杀死存活 TCP 连接的次数，更快释放资源
net.ipv4.tcp_retries2 = 15
net.ipv4.tcp_retries1 = 3

# 禁用空闲后慢启动，保持长连接高吞吐量 (推荐禁用)
net.ipv4.tcp_slow_start_after_idle = 0

# 启用 TCP Fast Open (TFO)，加快连接建立速度 (推荐启用，但注意防火墙兼容性)
net.ipv4.tcp_fastopen = 3

# 刷新路由缓存，确保新参数立即生效
net.ipv4.route.flush = 1
net.ipv6.route.flush = 1


###
### 欢迎提出意见、建议和补充!
###
------------------------------