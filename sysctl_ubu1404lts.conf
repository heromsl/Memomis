# Kernel sysctl configuration file for Linux
#
# Version 1.14 - 2019-04-05
# Michiel Klaver - IT Professional
# http://klaver.it/linux/ for the latest version - http://klaver.it/bsd/ for a BSD variant
#
# This file should be saved as /etc/sysctl.conf and can be activated using the command:
# sysctl -e -p /etc/sysctl.conf
#
# For binary values, 0 is disabled, 1 is enabled.  See sysctl(8) and sysctl.conf(5) for more details.
#
# Tested with: Ubuntu 14.04 LTS kernel version 3.13
#              Debian 7 kernel version 3.2
#              CentOS 7 kernel version 3.10

#
# Intended use for dedicated server systems at high-speed networks with loads of RAM and bandwidth available
# Optimised and tuned for high-performance web/ftp/mail/dns servers with high connection-rates
# DO NOT USE at busy networks or xDSL/Cable connections where packetloss can be expected
# ----------

# Credits:
# http://www.enigma.id.au/linux_tuning.txt
# http://www.securityfocus.com/infocus/1729
# http://fasterdata.es.net/TCP-tuning/linux.html
# http://fedorahosted.org/ktune/browser/sysctl.ktune
# http://www.cymru.com/Documents/ip-stack-tuning.html
# http://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt
# http://www.frozentux.net/ipsysctl-tutorial/chunkyhtml/index.html
# http://knol.google.com/k/linux-performance-tuning-and-measurement
# http://www.cyberciti.biz/faq/linux-kernel-tuning-virtual-memory-subsystem/
# http://www.redbooks.ibm.com/abstracts/REDP4285.html
# http://www.speedguide.net/read_articles.php?id=121
# http://lartc.org/howto/lartc.kernel.obscure.html
# http://en.wikipedia.org/wiki/Sysctl
# https://blog.cloudflare.com/http-2-prioritization-with-nginx/


###
### GENERAL SYSTEM SECURITY OPTIONS ###
###

# Controls the System Request debugging functionality of the kernel
# 控制内核的系统请求调试功能 (SysRq)。
# SysRq 是一个内核特性，允许在系统崩溃或无响应时执行一些低级别的命令，例如安全重启或强制同步磁盘。
# 禁用 SysRq 可以提高安全性，防止恶意用户利用 SysRq 触发潜在的漏洞或造成系统不稳定。
# 0: 禁用 SysRq 功能。 (推荐生产环境禁用)
# 1: 启用 SysRq 功能。 (调试或特定场景下使用)
kernel.sysrq = 0

# Controls whether core dumps will append the PID to the core filename.
# Useful for debugging multi-threaded applications.
# 控制核心转储 (core dump) 文件名是否附加进程ID (PID)。
# 核心转储是在程序崩溃时，系统将程序内存状态保存到文件中，用于事后调试。
# 启用 PID 附加可以区分不同进程产生的核心转储文件，尤其在调试多线程应用时非常有用。
# 0: 核心转储文件名不附加 PID。
# 1: 核心转储文件名附加 PID。 (推荐启用，方便调试)
kernel.core_uses_pid = 1

#Allow for more PIDs
# 允许更大的进程ID (PID) 范围。
# 增加 PID 最大值可以允许系统同时运行更多的进程。
# 65535 是一个相对较大的值，通常足以满足大多数服务器需求。
# 对于需要运行大量进程的系统 (例如高负载的 Web 服务器)，可以考虑增加此值。
kernel.pid_max = 65535

# The contents of /proc/<pid>/maps and smaps files are only visible to
# readers that are allowed to ptrace() the process
# 限制 /proc/<pid>/maps 和 /proc/<pid>/smaps 文件的访问权限。
# 这两个文件包含进程的内存映射信息，可能泄露敏感信息。
# 设置为 1 后，只有可以 `ptrace()` 进程的用户才能访问这些文件，提高了安全性。
# 0: 任何人都可以读取 /proc/<pid>/maps 和 /proc/<pid>/smaps。
# 1: 只有允许 ptrace() 进程的用户才能读取。 (推荐启用)
kernel.maps_protect = 1

#Enable ExecShield protection
# 启用 ExecShield 保护 (如果内核支持)。
# ExecShield 是一种安全机制，用于防止缓冲区溢出攻击，通过随机化内存布局，使攻击者难以预测代码执行地址。
# 在较新的内核中，ExecShield 的功能通常被集成到更现代的缓解措施中，例如 ASLR (地址空间布局随机化)。
# 1: 启用 ExecShield (如果内核支持)。
kernel.exec-shield = 1
kernel.randomize_va_space = 2
# 启用地址空间布局随机化 (ASLR)。
# ASLR 是一种重要的安全机制，通过随机化进程的内存地址空间，包括代码段、数据段、堆和栈的基地址，使攻击者难以预测内存地址，从而增加缓冲区溢出、返回导向编程 (ROP) 等攻击的难度。
# 0: 禁用 ASLR。
# 1: 仅对栈、mmap 库、VDSO 和堆进行随机化。
# 2: 对所有内容 (包括栈、mmap 库、VDSO、堆和程序基址) 进行完全随机化。 (推荐设置为 2，增强安全性)

# Controls the maximum size of a message, in bytes
# 控制消息队列中单个消息的最大大小 (字节)。
# 消息队列是一种进程间通信 (IPC) 机制。
# 65535 字节 (64KB) 是一个相对较大的消息大小，通常足以满足大多数应用需求。
kernel.msgmnb = 65535

# Controls the default maxmimum size of a mesage queue
# 控制消息队列的默认最大容量 (字节)。
# 消息队列的容量限制了可以存储在队列中的消息总大小。
# 65535 字节 (64KB) 是一个相对较大的队列容量，通常足以满足大多数应用需求。
kernel.msgmax = 65535

# Restrict core dumps
# 限制核心转储的行为，增强安全性。
# 当设置为 0 时，即使对于 setuid/setgid 程序，也允许生成核心转储文件，这可能泄露敏感信息。
# 0: 允许 setuid/setgid 程序生成核心转储文件。
# 1: 禁止 setuid/setgid 程序生成核心转储文件。 (推荐设置为 0，以禁用对特权程序的 core dump，降低安全风险)
fs.suid_dumpable = 0

# Hide exposed kernel pointers
# 隐藏暴露的内核指针信息。
# 内核指针信息可能被攻击者利用来绕过安全机制或进行内核漏洞利用。
# 设置为 1 后，`/proc/kallsyms` 和其他相关接口将不再显示内核指针地址，提高了安全性。
# 0: 显示内核指针地址。
# 1: 隐藏内核指针地址。 (推荐启用)
kernel.kptr_restrict = 1


###
### IMPROVE SYSTEM MEMORY MANAGEMENT ###
###

# Increase size of file handles and inode cache
# 增加文件句柄和 inode 缓存的大小。
# `fs.file-max` 控制系统级文件句柄的最大数量。
# `fs.inode-max` (已废弃，内核自动管理) 控制 inode 缓存的大小 (inode 缓存存储文件元数据，加速文件访问)。
# 增加这些值可以提高文件密集型应用的性能，例如 Web 服务器或数据库服务器。
# 209708 是一个相对较大的值，适用于高负载服务器。 对于 Ubuntu 20.04 来说，系统会自动根据内存大小动态调整，通常无需手动设置 `fs.inode-max`，但 `fs.file-max` 仍然可以根据预期文件句柄使用量进行调整。
fs.file-max = 209708

# Do less swapping
# 减少 swap 的使用。
# `vm.swappiness` 控制系统使用 swap 空间的倾向性，值越高越积极使用 swap。
# 较低的值 (例如 30) 意味着系统更倾向于将内存保留在 RAM 中，而不是交换到磁盘，这可以提高性能，尤其是在内存充足的情况下。
# `vm.dirty_ratio` 和 `vm.dirty_background_ratio` 控制脏数据 (已修改但尚未写入磁盘的数据) 在内存中的比例。
# 较高的比例可以减少同步写入磁盘的频率，提高写入性能，但也可能增加数据丢失的风险 (在系统崩溃时)。
# 30 和 5 是相对较高的比例，适用于具有足够内存且对写入性能有较高要求的服务器。 对于 Ubuntu 20.04，默认值可能已经比较合理，可以根据实际内存使用情况和性能需求微调。
vm.swappiness = 30
vm.dirty_ratio = 30
vm.dirty_background_ratio = 5

# specifies the minimum virtual address that a process is allowed to mmap
# 指定进程允许使用 `mmap` 系统调用映射的最小虚拟地址。
# 设置 `vm.mmap_min_addr` 可以防止某些类型的 NULL 指针解引用漏洞。
# 4096 (4KB) 是一个常见的值，用于确保进程不能映射到低地址内存区域，这通常是内核保留的。
vm.mmap_min_addr = 4096

# 50% overcommitment of available memory
# 允许 50% 的内存超额分配。
# `vm.overcommit_ratio` 控制内存超额分配的比例 (相对于 RAM + swap)。
# `vm.overcommit_memory` 控制内存超额分配的策略。
# 0: 启发式超额分配，内核根据一定的算法判断是否允许分配，可能会拒绝分配。
# 1: 总是允许超额分配，即使可能导致 OOM (Out Of Memory) 错误。
# 2: 不允许超额分配，分配的内存不能超过 RAM + swap。
# 设置为 `vm.overcommit_ratio = 50` 和 `vm.overcommit_memory = 0` 允许一定的内存超额分配，但仍然有一定的限制，可以提高内存利用率，同时避免过度超额分配导致系统不稳定。 对于 Ubuntu 20.04，默认的启发式超额分配策略通常已经比较合理，可以根据实际应用需求和内存压力情况进行调整。
vm.overcommit_ratio = 50
vm.overcommit_memory = 0

# Set maximum amount of memory allocated to shm to 256MB
# 设置共享内存 (shm) 的最大分配量为 256MB。
# `kernel.shmmax` 控制单个共享内存段的最大大小 (字节)。
# `kernel.shmall` 控制系统可以使用的共享内存页面的总数 (页面大小通常为 4KB)。
# 设置这些值可以限制共享内存的使用，防止恶意程序过度占用内存资源。
# 268435456 字节 (256MB) 是一个相对适中的共享内存限制，适用于大多数服务器应用。 对于 Ubuntu 20.04，如果应用需要使用大量的共享内存 (例如某些数据库或高性能计算应用)，可以适当增加这些值。
kernel.shmmax = 268435456
kernel.shmall = 268435456

# Keep at least 64MB of free RAM space available
# 保持至少 64MB 的可用 RAM 空间。
# `vm.min_free_kbytes` 设置系统保留的最小空闲内存量 (KB)。
# 当可用内存低于此值时，内核会更加积极地回收内存，例如交换页面或杀死进程 (OOM Killer)。
# 65535 KB (64MB) 是一个相对较小的保留内存量，可能不足以应对高负载或突发流量。 对于 Ubuntu 20.04，建议根据实际内存大小和服务器负载情况，适当增加此值，例如设置为 128MB 或 256MB，以提高系统在高负载下的稳定性。 也可以考虑使用百分比来动态调整，例如 `vm.min_free_kbytes = $(($(free | awk '/Mem/{print $2}') / 100 * 5)) # 保留 5% 的总内存`
vm.min_free_kbytes = 65535


###
### GENERAL NETWORK SECURITY OPTIONS ###
###

#Prevent SYN attack, enable SYNcookies (they will kick-in when the max_syn_backlog reached)
# 启用 SYN cookies 防御 SYN 攻击。
# SYN cookies 是一种应对 SYN flood 攻击的机制。当服务器的 SYN backlog 队列满时 (达到 `tcp_max_syn_backlog`)，服务器会使用 SYN cookies 而不是丢弃新的 SYN 请求。
# `net.ipv4.tcp_syncookies = 1` 启用 SYN cookies。
# `net.ipv4.tcp_syn_retries` 和 `net.ipv4.tcp_synack_retries` 控制 SYN 和 SYN-ACK 重传的次数。 较低的值可以加快连接建立速度，但也可能在网络环境较差的情况下导致连接失败。 默认值通常为 5 或 6，设置为 2 可以稍微降低重试次数，但需根据网络质量考虑。
# `net.ipv4.tcp_max_syn_backlog` 控制 SYN backlog 队列的最大长度。 较大的值可以容纳更多的 SYN 请求，降低 SYN flood 攻击的影响。 4096 是一个相对较大的值，适用于高负载服务器。 对于 Ubuntu 20.04，可以根据实际连接请求量和服务器负载情况进行调整，例如设置为 8192 或 16384。
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_max_syn_backlog = 4096

# Disables packet forwarding
# 禁用 IP 数据包转发。
# `net.ipv4.ip_forward` 和 `net.ipv6.conf.all.forwarding`/`net.ipv6.conf.default.forwarding` 禁用 IPv4 和 IPv6 的数据包转发功能。
# 对于作为终端服务器 (而非路由器或网关) 的系统，应该禁用数据包转发，以增强安全性，防止被用作网络跳板。
# 0: 禁用数据包转发。 (推荐禁用)
# 1: 启用数据包转发。
net.ipv4.ip_forward = 0
net.ipv4.conf.all.forwarding = 0
net.ipv4.conf.default.forwarding = 0
net.ipv6.conf.all.forwarding = 0
net.ipv6.conf.default.forwarding = 0

# Disables IP source routing
# 禁用 IP 源路由。
# 源路由允许数据包的发送者指定数据包的路由路径。 这可能被攻击者利用进行欺骗或绕过安全策略。
# `net.ipv4.conf.all.accept_source_route`/`net.ipv6.conf.all.accept_source_route` 和 `net.ipv4.conf.default.accept_source_route`/`net.ipv6.conf.default.accept_source_route` 禁用 IPv4 和 IPv6 的源路由接受功能。
# `net.ipv4.conf.all.send_redirects`/`net.ipv4.conf.default.send_redirects` 禁用 ICMP 重定向发送。
# 禁用源路由和 ICMP 重定向可以增强安全性，防止路由欺骗和中间人攻击。
# 0: 禁用源路由/ICMP 重定向。 (推荐禁用)
# 1: 启用源路由/ICMP 重定向。
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

# Enable IP spoofing protection, turn on source route verification
# 启用 IP 欺骗保护，开启源路由验证 (反向路径过滤)。
# 反向路径过滤 (RP Filter) 是一种安全机制，用于防止 IP 地址欺骗。它检查接收到的数据包的源地址是否可以通过反向路由到达本网络接口。
# `net.ipv4.conf.all.rp_filter` 和 `net.ipv4.conf.default.rp_filter` 启用 IPv4 的反向路径过滤。
# 1: 启用严格模式的反向路径过滤。 (推荐启用)
# 0: 禁用反向路径过滤。
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

# Disable ICMP Redirect Acceptance
# 禁用 ICMP 重定向接受。
# ICMP 重定向消息用于通知主机更优的路由路径。 但也可能被攻击者利用进行路由欺骗。
# `net.ipv4.conf.all.accept_redirects`/`net.ipv6.conf.all.accept_redirects` 和 `net.ipv4.conf.default.accept_redirects`/`net.ipv6.conf.default.accept_redirects` 禁用 IPv4 和 IPv6 的 ICMP 重定向接受功能。
# `net.ipv4.conf.all.secure_redirects`/`net.ipv4.conf.default.secure_redirects` 禁用安全 ICMP 重定向接受 (仅适用于旧版本内核，新内核已废弃)。
# 0: 禁用 ICMP 重定向接受。 (推荐禁用)
# 1: 启用 ICMP 重定向接受。
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0

# Enable Log Spoofed Packets, Source Routed Packets, Redirect Packets
# 启用记录欺骗数据包、源路由数据包和重定向数据包。
# `net.ipv4.conf.all.log_martians` 和 `net.ipv4.conf.default.log_martians` 启用 IPv4 的可疑数据包日志记录。
# 1: 启用日志记录。 (推荐启用，方便安全审计)
# 0: 禁用日志记录。
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1

# Decrease the time default value for tcp_fin_timeout connection
# 减少 TCP FIN_WAIT_2 状态的超时时间。
# `net.ipv4.tcp_fin_timeout` 控制 TCP 连接在 FIN_WAIT_2 状态的超时时间 (秒)。
# 默认值通常为 60 秒。 降低此值 (例如设置为 7 秒) 可以更快地回收 FIN_WAIT_2 状态的连接资源，在高并发场景下可能有所帮助。 但过低的值可能导致连接过早关闭，影响正常通信。 需要根据实际应用场景进行权衡。 对于 Ubuntu 20.04，默认值可能已经比较合理，可以根据具体需求微调。
net.ipv4.tcp_fin_timeout = 7

# Decrease the time default value for connections to keep alive
# 减少 TCP 保活 (keepalive) 连接的默认时间。
# `net.ipv4.tcp_keepalive_time` 控制 TCP 保活探测的间隔时间 (秒)。
# `net.ipv4.tcp_keepalive_probes` 控制保活探测失败的次数。
# `net.ipv4.tcp_keepalive_intvl` 控制保活探测的间隔时间 (秒)。
# 较低的值可以更快地检测到死连接，回收资源。 但过低的频率可能增加网络开销。
# 300 秒 (5 分钟)、5 次探测、15 秒间隔 是相对激进的保活设置，适用于需要快速回收死连接资源的场景。 对于 Ubuntu 20.04，默认值可能已经比较合理，可以根据具体需求微调。
net.ipv4.tcp_keepalive_time = 300
net.ipv4.tcp_keepalive_probes = 5
net.ipv4.tcp_keepalive_intvl = 15

# Don't relay bootp
# 禁止 BOOTP 中继。
# BOOTP (Bootstrap Protocol) 是一种早期的网络引导协议，已被 DHCP 替代。
# `net.ipv4.conf.all.bootp_relay` 禁用 IPv4 的 BOOTP 中继功能。
# 0: 禁用 BOOTP 中继。 (推荐禁用)
# 1: 启用 BOOTP 中继。
net.ipv4.conf.all.bootp_relay = 0

# Don't proxy arp for anyone
# 禁止代理 ARP。
# 代理 ARP 允许主机代替网络上的其他主机响应 ARP 请求。 这可能被攻击者利用进行 ARP 欺骗。
# `net.ipv4.conf.all.proxy_arp` 禁用 IPv4 的代理 ARP 功能。
# 0: 禁用代理 ARP。 (推荐禁用)
# 1: 启用代理 ARP。
net.ipv4.conf.all.proxy_arp = 0

# Turn on the tcp_timestamps, accurate timestamp make TCP congestion control algorithms work better
# 启用 TCP 时间戳。
# TCP 时间戳用于提高 TCP 性能，例如支持 RTT (往返时间) 测量、PAWS (Protection Against Wrapped Sequence Numbers) 等功能。
# `net.ipv4.tcp_timestamps = 1` 启用 TCP 时间戳。
# 1: 启用 TCP 时间戳。 (推荐启用，提高 TCP 性能)
# 0: 禁用 TCP 时间戳。
net.ipv4.tcp_timestamps = 1

# Don't ignore directed pings
# 不忽略定向 Ping 请求 (直接发送到本机IP地址的 Ping)。
# `net.ipv4.icmp_echo_ignore_all = 0` 不忽略所有 Ping 请求。
# 0: 不忽略所有 Ping 请求。 (推荐设置为 0，允许响应 Ping 请求，方便网络诊断)
# 1: 忽略所有 Ping 请求。
net.ipv4.icmp_echo_ignore_all = 0

# Enable ignoring broadcasts request
# 启用忽略广播 Ping 请求。
# 广播 Ping 请求发送到网络广播地址，可能导致网络拥塞或被用于 DDoS 攻击。
# `net.ipv4.icmp_echo_ignore_broadcasts = 1` 忽略广播 Ping 请求。
# 1: 忽略广播 Ping 请求。 (推荐启用，减少广播风暴和 DDoS 风险)
# 0: 不忽略广播 Ping 请求。
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Enable bad error message Protection
# 启用错误消息保护。
# `net.ipv4.icmp_ignore_bogus_error_responses = 1` 忽略格式错误的 ICMP 错误响应消息。
# 这可以防止某些类型的 ICMP 攻击。
# 1: 忽略格式错误的 ICMP 错误响应消息。 (推荐启用，增强安全性)
# 0: 不忽略。
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Allowed local port range
# 允许的本地端口范围。
# `net.ipv4.ip_local_port_range` 设置动态端口分配的范围。
# 16384 65535 是一个常见的动态端口范围，符合 IANA 的建议。
# 可以根据实际应用需求进行调整，例如在高并发场景下，可能需要更大的端口范围。 对于 Ubuntu 20.04，默认范围可能已经足够，可以根据实际端口使用情况进行调整。
net.ipv4.ip_local_port_range = 16384 65535

# Enable a fix for RFC1337 - time-wait assassination hazards in TCP
# 启用 RFC1337 的修复，解决 TCP TIME-WAIT 状态的潜在风险。
# `net.ipv4.tcp_rfc1337 = 1` 启用 RFC1337 修复。
# 1: 启用 RFC1337 修复。 (推荐启用，提高 TCP 稳定性)
# 0: 禁用 RFC1337 修复。
net.ipv4.tcp_rfc1337 = 1

# Do not auto-configure IPv6
# 禁用 IPv6 自动配置。
# `net.ipv6.conf.all.autoconf`/`net.ipv6.conf.default.autoconf`/`net.ipv6.conf.eth0.autoconf` 禁用 IPv6 的自动配置 (例如 SLAAC - 无状态地址自动配置)。
# `net.ipv6.conf.all.accept_ra`/`net.ipv6.conf.default.accept_ra`/`net.ipv6.conf.eth0.accept_ra` 禁用 IPv6 路由器通告 (Router Advertisement) 接受。
# 如果服务器不需要使用 IPv6 或使用静态 IPv6 配置，可以禁用 IPv6 自动配置，增强安全性，并避免不必要的网络流量。 如果需要使用 IPv6，则不应禁用自动配置，或者需要配置静态 IPv6 地址。 对于 Ubuntu 20.04，如果不需要 IPv6，禁用自动配置是合理的。
net.ipv6.conf.all.autoconf=0
net.ipv6.conf.all.accept_ra=0
net.ipv6.conf.default.autoconf=0
net.ipv6.conf.default.accept_ra=0
net.ipv6.conf.eth0.autoconf=0
net.ipv6.conf.eth0.accept_ra=0


###
### TUNING NETWORK PERFORMANCE ###
###

# Use BBR TCP congestion control and set tcp_notsent_lowat to 16384 to ensure HTTP/2 prioritization works optimally
# Do a 'modprobe tcp_bbr' first (kernel > 4.9)
# Fall-back to htcp if bbr is unavailable (older kernels)
# 使用 BBR TCP 拥塞控制算法，并将 tcp_notsent_lowat 设置为 16384，以优化 HTTP/2 优先级。
# BBR (Bottleneck Bandwidth and RTT) 是一种较新的 TCP 拥塞控制算法，旨在提高高带宽、高延迟网络环境下的性能。
# `net.ipv4.tcp_congestion_control = bbr` 尝试设置 BBR 拥塞控制算法。  注意：需要内核版本 >= 4.9 并且已加载 `tcp_bbr` 模块 (`modprobe tcp_bbr`)。
# `net.ipv4.tcp_congestion_control = htcp` 设置 HTCP 拥塞控制算法作为 fallback，如果 BBR 不可用。 HTCP 是一个较为传统的拥塞控制算法，在某些情况下可能表现良好。
# `net.ipv4.tcp_notsent_lowat = 16384` 设置未发送数据队列的低水位线。  这个参数与 HTTP/2 优先级有关，可以确保 HTTP/2 连接的优先级得到有效体现。
# 对于 Ubuntu 20.04，内核版本通常 >= 5.x，支持 BBR 拥塞控制算法。 推荐使用 BBR 提高网络性能，尤其是对于面向互联网的服务器。
net.ipv4.tcp_congestion_control = bbr
net.ipv4.tcp_notsent_lowat = 16384

# For servers with tcp-heavy workloads, enable 'fq' queue management scheduler (kernel > 3.12)
# 对于 TCP 负载较重的服务器，启用 'fq' (Fair Queueing) 队列管理调度器 (kernel > 3.12)。
# `net.core.default_qdisc = fq` 设置默认的队列管理调度器为 fq。
# fq 是一种公平队列算法，可以提高网络公平性和降低延迟，特别是在网络拥塞的情况下。 适用于 TCP 负载较重的服务器，例如 Web 服务器或邮件服务器。 对于 Ubuntu 20.04，内核版本通常 >= 5.x，支持 fq 队列管理调度器。 推荐启用 fq 提高网络性能。
net.core.default_qdisc = fq

# Turn on the tcp_window_scaling
# 启用 TCP 窗口缩放 (Window Scaling)。
# TCP 窗口缩放允许 TCP 窗口大小超过 64KB 的限制，从而提高高带宽网络环境下的吞吐量。
# `net.ipv4.tcp_window_scaling = 1` 启用 TCP 窗口缩放。
# 1: 启用 TCP 窗口缩放。 (推荐启用，提高高带宽网络性能)
# 0: 禁用 TCP 窗口缩放。
net.ipv4.tcp_window_scaling = 1

# Increase the read-buffer space allocatable
# 增加 TCP 和 UDP 接收缓冲区的大小。
# `net.ipv4.tcp_rmem` 设置 TCP 接收缓冲区的大小范围 (min, default, max)。
# `net.ipv4.udp_rmem_min` 设置 UDP 最小接收缓冲区大小。
# `net.core.rmem_default` 设置所有协议的默认接收缓冲区大小。
# `net.core.rmem_max` 设置所有协议的最大接收缓冲区大小。
# 较大的接收缓冲区可以提高网络吞吐量，减少丢包，尤其是在高带宽或高延迟网络环境下。
# 8192 87380 16777216 和 16384 262144 16777216 都是相对较大的缓冲区大小，适用于高负载服务器。 对于 Ubuntu 20.04，可以根据实际网络带宽和负载情况进行调整，例如可以进一步增加最大值。
net.ipv4.tcp_rmem = 8192 87380 16777216
net.ipv4.udp_rmem_min = 16384
net.core.rmem_default = 262144
net.core.rmem_max = 16777216

# Increase the write-buffer-space allocatable
# 增加 TCP 和 UDP 发送缓冲区的大小。
# `net.ipv4.tcp_wmem` 设置 TCP 发送缓冲区的大小范围 (min, default, max)。
# `net.ipv4.udp_wmem_min` 设置 UDP 最小发送缓冲区大小。
# `net.core.wmem_default` 设置所有协议的默认发送缓冲区大小。
# `net.core.wmem_max` 设置所有协议的最大发送缓冲区大小。
# 较大的发送缓冲区可以提高网络吞吐量，减少阻塞，尤其是在高带宽或高延迟网络环境下。
# 8192 65536 16777216 和 16384 262144 16777216 都是相对较大的缓冲区大小，适用于高负载服务器。 对于 Ubuntu 20.04，可以根据实际网络带宽和负载情况进行调整，例如可以进一步增加最大值。
net.ipv4.tcp_wmem = 8192 65536 16777216
net.ipv4.udp_wmem_min = 16384
net.core.wmem_default = 262144
net.core.wmem_max = 16777216

# Increase number of incoming connections
# 增加 TCP 连接的 backlog 队列大小。
# `net.core.somaxconn` 设置 listen() 系统调用的 backlog 队列的最大长度。
# 较大的 backlog 队列可以容纳更多的等待接受的连接，在高并发场景下可以防止连接丢失。
# 32768 是一个非常大的值，适用于高负载服务器。 对于 Ubuntu 20.04，可以根据实际连接请求量和服务器负载情况进行调整，例如设置为 65535 或更大。
net.core.somaxconn = 32768

# Increase number of incoming connections backlog
# 增加网络设备接收队列的最大长度和设备权重。
# `net.core.netdev_max_backlog` 设置网络设备接收队列的最大长度。
# `net.core.dev_weight` 设置每个网络设备在轮询中的权重。
# 较大的接收队列和设备权重可以提高网络设备的包处理能力，减少丢包，尤其在高负载网络环境下。
# 16384 和 64 是相对较大的值，适用于高负载服务器。 对于 Ubuntu 20.04，可以根据实际网络负载情况进行调整，例如可以进一步增加接收队列长度。
net.core.netdev_max_backlog = 16384
net.core.dev_weight = 64

# Increase the maximum amount of option memory buffers
# 增加最大选项内存缓冲区大小。
# `net.core.optmem_max` 设置套接字选项内存缓冲区的最大大小。
# 较大的值可以允许存储更多的套接字选项，例如 TCP 时间戳或窗口缩放选项。
# 65535 是一个相对较大的值，通常足以满足大多数应用需求。
net.core.optmem_max = 65535

# Increase the tcp-time-wait buckets pool size to prevent simple DOS attacks
# 增加 TCP TIME-WAIT 状态连接的 bucket 池大小，以防止简单的 DOS 攻击。
# `net.ipv4.tcp_max_tw_buckets` 设置 TCP TIME-WAIT 状态连接的最大 bucket 数量。
# 较大的 bucket 池可以容纳更多的 TIME-WAIT 连接，降低 TIME-WAIT 连接耗尽的风险，尤其是在高并发短连接场景下。
# 1440000 是一个非常大的值，适用于高负载服务器。 对于 Ubuntu 20.04，可以根据实际连接模式和服务器负载情况进行调整。
net.ipv4.tcp_max_tw_buckets = 1440000

# try to reuse time-wait connections, but don't recycle them (recycle can break clients behind NAT)
# 尝试重用 TIME-WAIT 状态的连接，但不回收 (回收可能破坏 NAT 后面的客户端)。
# `net.ipv4.tcp_tw_recycle` (已废弃，不推荐使用) 曾用于快速回收 TIME-WAIT 连接，但可能导致 NAT 环境下的连接问题。
# `net.ipv4.tcp_tw_reuse = 1` 允许重用 TIME-WAIT 状态的连接用于新的出站连接。 这在某些高并发场景下可以提高性能，但需要谨慎使用，并确保理解其潜在影响。 对于 Ubuntu 20.04，建议保持 `net.ipv4.tcp_tw_recycle = 0` (禁用回收) 并启用 `net.ipv4.tcp_tw_reuse = 1` (允许重用)。
net.ipv4.tcp_tw_recycle = 0
net.ipv4.tcp_tw_reuse = 1

# Limit number of orphans, each orphan can eat up to 16M (max wmem) of unswappable memory
# 限制孤立 TCP 连接的数量，每个孤立连接可能占用高达 16MB (max wmem) 的不可交换内存。
# `net.ipv4.tcp_max_orphans` 设置孤立 TCP 连接的最大数量。
# `net.ipv4.tcp_orphan_retries` 设置孤立 TCP 连接的重试次数。
# 限制孤立连接的数量可以防止资源耗尽，尤其是在遭受攻击或程序错误导致大量连接断开但未正确清理的情况下。
# 16384 和 0 是相对保守的值，适用于需要限制孤立连接数量的场景。 对于 Ubuntu 20.04，可以根据实际应用场景和资源限制进行调整。
net.ipv4.tcp_max_orphans = 16384
net.ipv4.tcp_orphan_retries = 0

# Limit the maximum memory used to reassemble IP fragments (CVE-2018-5391)
# 限制用于重组 IP 分片的最大内存 (CVE-2018-5391 漏洞缓解)。
# `net.ipv4.ipfrag_low_thresh`/`net.ipv6.ip6frag_low_thresh` 设置 IP 分片重组低水位阈值。
# `net.ipv4.ipfrag_high_thresh`/`net.ipv6.ip6frag_high_thresh` 设置 IP 分片重组高水位阈值。
# 限制 IP 分片重组内存可以防止分片风暴攻击或内存耗尽漏洞。
# 196608 和 262144 字节 是相对适中的分片重组内存限制。 对于 Ubuntu 20.04，这些值可以提供一定的安全保护，同时允许正常的 IP 分片重组。
net.ipv4.ipfrag_low_thresh = 196608
net.ipv6.ip6frag_low_thresh = 196608
net.ipv4.ipfrag_high_thresh = 262144
net.ipv6.ip6frag_high_thresh = 262144


# don't cache ssthresh from previous connection
# 不缓存来自先前连接的慢启动阈值 (ssthresh)。
# `net.ipv4.tcp_no_metrics_save = 1` 禁用 TCP 连接指标保存。
# `net.ipv4.tcp_moderate_rcvbuf = 1` 启用 TCP 接收缓冲区自动调整。
# 禁用 ssthresh 缓存可以使新的连接更公平地竞争带宽资源。 启用接收缓冲区自动调整可以根据网络状况动态调整接收缓冲区大小，提高性能。 对于 Ubuntu 20.04，这些设置通常是推荐的。
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.tcp_moderate_rcvbuf = 1

# Increase size of RPC datagram queue length
# 增加 RPC 数据报队列长度。
# `net.unix.max_dgram_qlen` 设置 Unix 域数据报套接字的队列最大长度，也影响 RPC (Remote Procedure Call) 的数据报队列。
# 较大的队列长度可以容纳更多的 RPC 请求，在高负载 RPC 服务场景下可以提高性能。
# 50 是一个相对适中的值，适用于一般 RPC 服务。 对于 Ubuntu 20.04，可以根据实际 RPC 负载情况进行调整。
net.unix.max_dgram_qlen = 50

# Don't allow the arp table to become bigger than this
# 限制 ARP 表的最大大小。
# `net.ipv4.neigh.default.gc_thresh3` 设置 ARP 表的最大条目数。
# 超过此阈值时，ARP 垃圾回收 (GC) 会更积极地清理旧的 ARP 条目。
# 2048 是一个相对较大的 ARP 表大小，适用于较大规模的局域网。 对于 Ubuntu 20.04，可以根据实际网络规模进行调整。

# Tell the gc when to become aggressive with arp table cleaning.
# Adjust this based on size of the LAN. 1024 is suitable for most /24 networks
# 设置 ARP 垃圾回收 (GC) 开始变得激进的阈值。
# `net.ipv4.neigh.default.gc_thresh2` 设置 ARP 表的中间阈值。
# 当 ARP 表条目数超过此阈值时，ARP GC 会开始更频繁地运行。
# 1024 适用于大多数 /24 网络 (254 个可用主机)。 对于 Ubuntu 20.04，可以根据实际网络规模进行调整。

# Adjust where the gc will leave arp table alone - set to 32.
# 设置 ARP 垃圾回收 (GC) 停止清理 ARP 表的阈值。
# `net.ipv4.neigh.default.gc_thresh1` 设置 ARP 表的低阈值。
# 当 ARP 表条目数低于此阈值时，ARP GC 会停止运行。
# 32 是一个相对较小的低阈值。 对于 Ubuntu 20.04，可以根据实际网络规模进行调整。

# Adjust to arp table gc to clean-up more often
# 调整 ARP 垃圾回收 (GC) 的运行间隔，使其更频繁地清理 ARP 表。
# `net.ipv4.neigh.default.gc_interval` 设置 ARP GC 的运行间隔 (秒)。
# 30 秒 是一个相对较短的间隔，可以使 ARP 表更及时地清理旧条目。 对于 Ubuntu 20.04，可以根据实际网络环境和 ARP 表大小进行调整。

# Increase TCP queue length
# 增加 TCP 队列长度。
# `net.ipv4.neigh.default.proxy_qlen` 设置代理 ARP 队列长度 (如果启用了代理 ARP，但通常不启用)。
# `net.ipv4.neigh.default.unres_qlen` 设置未解析 ARP 条目的队列长度。
# 较大的队列长度可以容纳更多的 ARP 请求，在高负载 ARP 请求场景下可以减少丢包。
# 96 和 6 是相对适中的队列长度。 对于 Ubuntu 20.04，可以根据实际网络环境和 ARP 请求量进行调整。

net.ipv4.neigh.default.gc_thresh3 = 2048
net.ipv4.neigh.default.gc_thresh2 = 1024
net.ipv4.neigh.default.gc_thresh1 = 32
net.ipv4.neigh.default.gc_interval = 30
net.ipv4.neigh.default.proxy_qlen = 96
net.ipv4.neigh.default.unres_qlen = 6

# Enable Explicit Congestion Notification (RFC 3168), disable it if it doesn't work for you
# 启用显式拥塞通知 (ECN - Explicit Congestion Notification, RFC 3168)。
# `net.ipv4.tcp_ecn = 1` 启用 TCP ECN。
# ECN 是一种拥塞控制机制，允许路由器在网络拥塞时显式地通知发送端，而不是丢弃数据包。 启用 ECN 可以提高网络效率，减少丢包，尤其是在支持 ECN 的网络环境下。 如果网络环境不支持 ECN 或出现兼容性问题，可以禁用 ECN (`net.ipv4.tcp_ecn = 0`). 对于 Ubuntu 20.04，如果网络环境支持 ECN，推荐启用。
net.ipv4.tcp_ecn = 1
net.ipv4.tcp_reordering = 3
# `net.ipv4.tcp_reordering = 3` 设置 TCP 乱序数据包的最大容忍度。
#  3 表示允许最多 3 个乱序数据包。  可以根据网络质量进行调整，网络质量较差可以适当增加容忍度。

# How many times to retry killing an alive TCP connection
# 设置重试杀死存活 TCP 连接的次数。
# `net.ipv4.tcp_retries2` 设置尝试杀死存活 TCP 连接的最大重试次数。 超过此次数后，连接将被强制关闭。
# `net.ipv4.tcp_retries1` 设置在第一次重试超时后，重新尝试发送数据包的次数。
# 15 和 3 是相对保守的重试次数，适用于需要快速释放连接资源的场景。 对于 Ubuntu 20.04，可以根据实际应用场景和网络质量进行调整。
net.ipv4.tcp_retries2 = 15
net.ipv4.tcp_retries1 = 3

# Avoid falling back to slow start after a connection goes idle
# keeps our cwnd large with the keep alive connections (kernel > 3.6)
# 避免 TCP 连接空闲后退回到慢启动阶段。
# `net.ipv4.tcp_slow_start_after_idle = 0` 禁用空闲后慢启动。
# 禁用空闲后慢启动可以保持连接的拥塞窗口 (cwnd) 较大，从而在连接恢复活跃后更快地达到较高吞吐量。 这对于保持长连接活跃的应用 (例如 HTTP keep-alive 连接) 有益。 需要内核版本 >= 3.6。 对于 Ubuntu 20.04，内核版本通常 >= 5.x，支持此特性。 推荐禁用空闲后慢启动。
net.ipv4.tcp_slow_start_after_idle = 0

# Allow the TCP fastopen flag to be used, beware some firewalls do not like TFO! (kernel > 3.7)
# 允许使用 TCP Fast Open (TFO) 标志，注意某些防火墙可能不支持 TFO! (kernel > 3.7)。
# `net.ipv4.tcp_fastopen = 3` 启用 TCP Fast Open。
# TCP Fast Open 允许客户端在 SYN 包中携带数据，从而减少 TCP 连接建立的 RTT (往返时间)，提高连接建立速度。  需要内核版本 >= 3.7。 对于 Ubuntu 20.04，内核版本通常 >= 5.x，支持 TFO。  推荐启用 TFO 提高连接建立速度，但需要注意某些防火墙或网络设备可能不支持 TFO，可能导致连接问题。 如果遇到问题，可以尝试禁用 TFO (`net.ipv4.tcp_fastopen = 0`)。
#  3 表示同时启用客户端和服务器端的 TFO。
net.ipv4.tcp_fastopen = 3

# This will enusre that immediatly subsequent connections use the new values
# 确保后续连接立即使用新的参数值。
# `net.ipv4.route.flush = 1` 和 `net.ipv6.route.flush = 1` 刷新路由缓存。
# 刷新路由缓存可以确保新的连接使用最新的路由信息和参数设置。  在修改网络参数后，建议刷新路由缓存。
net.ipv4.route.flush = 1
net.ipv6.route.flush = 1


###
### Comments/suggestions/additions are welcome!
###
------------------------------